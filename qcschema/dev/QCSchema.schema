{
    "title": "QCSchema",
    "definitions": {
        "Identifiers": {
            "title": "Identifiers",
            "description": "Canonical chemical identifiers\n\nParameters\n----------\nmolecule_hash : str, Optional\nmolecular_formula : str, Optional\nsmiles : str, Optional\ninchi : str, Optional\ninchikey : str, Optional\ncanonical_explicit_hydrogen_smiles : str, Optional\ncanonical_isomeric_explicit_hydrogen_mapped_smiles : str, Optional\ncanonical_isomeric_explicit_hydrogen_smiles : str, Optional\ncanonical_isomeric_smiles : str, Optional\ncanonical_smiles : str, Optional\npubchem_cid : str, Optional\n    PubChem Compound ID\npubchem_sid : str, Optional\n    PubChem Substance ID\npubchem_conformerid : str, Optional\n    PubChem Conformer ID",
            "type": "object",
            "properties": {
                "molecule_hash": {
                    "title": "Molecule Hash",
                    "type": "string"
                },
                "molecular_formula": {
                    "title": "Molecular Formula",
                    "type": "string"
                },
                "smiles": {
                    "title": "Smiles",
                    "type": "string"
                },
                "inchi": {
                    "title": "Inchi",
                    "type": "string"
                },
                "inchikey": {
                    "title": "Inchikey",
                    "type": "string"
                },
                "canonical_explicit_hydrogen_smiles": {
                    "title": "Canonical Explicit Hydrogen Smiles",
                    "type": "string"
                },
                "canonical_isomeric_explicit_hydrogen_mapped_smiles": {
                    "title": "Canonical Isomeric Explicit Hydrogen Mapped Smiles",
                    "type": "string"
                },
                "canonical_isomeric_explicit_hydrogen_smiles": {
                    "title": "Canonical Isomeric Explicit Hydrogen Smiles",
                    "type": "string"
                },
                "canonical_isomeric_smiles": {
                    "title": "Canonical Isomeric Smiles",
                    "type": "string"
                },
                "canonical_smiles": {
                    "title": "Canonical Smiles",
                    "type": "string"
                },
                "pubchem_cid": {
                    "title": "Pubchem Cid",
                    "description": "PubChem Compound ID",
                    "type": "string"
                },
                "pubchem_sid": {
                    "title": "Pubchem Sid",
                    "description": "PubChem Substance ID",
                    "type": "string"
                },
                "pubchem_conformerid": {
                    "title": "Pubchem Conformerid",
                    "description": "PubChem Conformer ID",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "Provenance": {
            "title": "Provenance",
            "description": "Provenance information.\n\nParameters\n----------\ncreator : str\n    The name of the program, library, or person who created the object.\nversion : str, Default: \n    The version of the creator, blank otherwise. This should be sortable by the very broad [PEP 440](https://www.python.org/dev/peps/pep-0440/).\nroutine : str, Default: \n    The name of the routine or function within the creator, blank otherwise.",
            "type": "object",
            "properties": {
                "creator": {
                    "title": "Creator",
                    "description": "The name of the program, library, or person who created the object.",
                    "type": "string"
                },
                "version": {
                    "title": "Version",
                    "description": "The version of the creator, blank otherwise. This should be sortable by the very broad [PEP 440](https://www.python.org/dev/peps/pep-0440/).",
                    "default": "",
                    "type": "string"
                },
                "routine": {
                    "title": "Routine",
                    "description": "The name of the routine or function within the creator, blank otherwise.",
                    "default": "",
                    "type": "string"
                }
            },
            "required": [
                "creator"
            ],
            "$schema": "http://json-schema.org/draft-04/schema#"
        },
        "Molecule": {
            "title": "Molecule",
            "description": "The physical Cartesian representation of the molecular system.\n\nA QCSchema representation of a Molecule. This model contains\ndata for symbols, geometry, connectivity, charges, fragmentation, etc while also supporting a wide array of I/O and manipulation capabilities.\n\nMolecule objects geometry, masses, and charges are truncated to 8, 6, and 4 decimal places respectively to assist with duplicate detection.\n\nNotes\n-----\nAll arrays are stored flat but must be reshapable into the dimensions in attribute ``shape``, with abbreviations as follows:\n    nat: number of atomic = calcinfo_natom\n    nfr: number of fragments\n    <varies>: irregular dimension not systematically reshapable",
            "type": "object",
            "properties": {
                "schema_name": {
                    "title": "Schema Name",
                    "description": "The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_molecule.",
                    "default": "qcschema_molecule",
                    "pattern": "^(qcschema_molecule)$",
                    "type": "string"
                },
                "schema_version": {
                    "title": "Schema Version",
                    "description": "The version number of ``schema_name`` to which this model conforms.",
                    "default": 2,
                    "type": "integer"
                },
                "validated": {
                    "title": "Validated",
                    "description": "A boolean indicator (for speed purposes) that the input Molecule data has been previously checked for schema (data layout and type) and physics (e.g., non-overlapping atoms, feasible multiplicity) compliance. This should be False in most cases. A ``True`` setting should only ever be set by the constructor for this class itself or other trusted sources such as a Fractal Server or previously serialized Molecules.",
                    "default": false,
                    "type": "boolean"
                },
                "symbols": {
                    "title": "Symbols",
                    "description": "The ordered array of atomic elemental symbols in title case. This field's index sets atomic order for all other per-atom fields like ``real`` and the first dimension of ``geometry``. Ghost/virtual atoms must have an entry here in ``symbols``; ghostedness is indicated through the ``real`` field.",
                    "shape": [
                        "nat"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "geometry": {
                    "title": "Geometry",
                    "description": "The ordered array for Cartesian XYZ atomic coordinates [a0]. Atom ordering is fixed; that is, a consumer who shuffles atoms must not reattach the input (pre-shuffling) molecule schema instance to any output (post-shuffling) per-atom results (e.g., gradient). Index of the first dimension matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``.\nSerialized storage is always flat, (3*nat,), but QCSchema implementations will want to reshape it. QCElemental can also accept array-likes which can be mapped to (nat,3) such as a 1-D list of length 3*nat, or the serialized version of the array in (3*nat,) shape; all forms will be reshaped to (nat,3) for this attribute.",
                    "shape": [
                        "nat",
                        3
                    ],
                    "units": "a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "name": {
                    "title": "Name",
                    "description": "Common or human-readable name to assign to this molecule. This field can be arbitrary; see ``identifiers`` for well-defined labels.",
                    "type": "string"
                },
                "identifiers": {
                    "title": "Identifiers",
                    "description": "An optional dictionary of additional identifiers by which this molecule can be referenced, such as INCHI, canonical SMILES, etc. See the :class:``Identifiers`` model for more details.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Identifiers"
                        }
                    ]
                },
                "comment": {
                    "title": "Comment",
                    "description": "Additional comments for this molecule. Intended for pure human/user consumption and clarity.",
                    "type": "string"
                },
                "molecular_charge": {
                    "title": "Molecular Charge",
                    "description": "The net electrostatic charge of the molecule.",
                    "default": 0.0,
                    "type": "number"
                },
                "molecular_multiplicity": {
                    "title": "Molecular Multiplicity",
                    "description": "The total multiplicity of the molecule.",
                    "default": 1,
                    "type": "integer"
                },
                "masses": {
                    "title": "Masses",
                    "description": "The ordered array of atomic masses. Index order matches the 0-indexed indices of all other per-atom fields like ``symbols`` and ``real``. If this is not provided, the mass of each atom is inferred from its most common isotope. If this is provided, it must be the same length as ``symbols`` but can accept ``None`` entries for standard masses to infer from the same index in the ``symbols`` field.",
                    "shape": [
                        "nat"
                    ],
                    "units": "u",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "real": {
                    "title": "Real",
                    "description": "The ordered array indicating if each atom is real (``True``) or ghost/virtual (``False``). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and the first dimension of ``geometry``. If this is not provided, all atoms are assumed to be real (``True``).If this is provided, the reality or ghostedness of every atom must be specified.",
                    "shape": [
                        "nat"
                    ],
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "atom_labels": {
                    "title": "Atom Labels",
                    "description": "Additional per-atom labels as an array of strings. Typical use is in model conversions, such as Elemental <-> Molpro and not typically something which should be user assigned. See the ``comments`` field for general human-consumable text to affix to the molecule.",
                    "shape": [
                        "nat"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "atomic_numbers": {
                    "title": "Atomic Numbers",
                    "description": "An optional ordered 1-D array-like object of atomic numbers of shape (nat,). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Values are inferred from the ``symbols`` list if not explicitly set. Ghostedness should be indicated through ``real`` field, not zeros here.",
                    "shape": [
                        "nat"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number",
                        "multipleOf": 1.0
                    }
                },
                "mass_numbers": {
                    "title": "Mass Numbers",
                    "description": "An optional ordered 1-D array-like object of atomic *mass* numbers of shape (nat). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Values are inferred from the most common isotopes of the ``symbols`` list if not explicitly set. If single isotope not (yet) known for an atom, -1 is placeholder.",
                    "shape": [
                        "nat"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number",
                        "multipleOf": 1.0
                    }
                },
                "connectivity": {
                    "title": "Connectivity",
                    "description": "A list of bonds within the molecule. Each entry is a tuple of ``(atom_index_A, atom_index_B, bond_order)`` where the ``atom_index`` matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Bonds may be freely reordered and inverted.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 5
                            }
                        ]
                    }
                },
                "fragments": {
                    "title": "Fragments",
                    "description": "List of indices grouping atoms (0-indexed) into molecular fragments within the molecule. Each entry in the outer list is a new fragment; index matches the ordering in ``fragment_charges`` and ``fragment_multiplicities``. Inner lists are 0-indexed atoms which compose the fragment; every atom must be in exactly one inner list. Noncontiguous fragments are allowed, though no QM program is known to support them. Fragment ordering is fixed; that is, a consumer who shuffles fragments must not reattach the input (pre-shuffling) molecule schema instance to any output (post-shuffling) per-fragment results (e.g., n-body energy arrays).",
                    "shape": [
                        "nfr",
                        "<varies>"
                    ],
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "multipleOf": 1.0
                        }
                    }
                },
                "fragment_charges": {
                    "title": "Fragment Charges",
                    "description": "The total charge of each fragment in the ``fragments`` list. The index of this list matches the 0-index indices of ``fragments`` list. Will be filled in based on a set of rules if not provided (and ``fragments`` are specified).",
                    "shape": [
                        "nfr"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "fragment_multiplicities": {
                    "title": "Fragment Multiplicities",
                    "description": "The multiplicity of each fragment in the ``fragments`` list. The index of this list matches the 0-index indices of ``fragments`` list. Will be filled in based on a set of rules if not provided (and ``fragments`` are specified).",
                    "shape": [
                        "nfr"
                    ],
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "fix_com": {
                    "title": "Fix Com",
                    "description": "Whether translation of geometry is allowed (fix F) or disallowed (fix T).When False, QCElemental will pre-process the Molecule object to translate the center of mass to (0,0,0) in Euclidean coordinate space, resulting in a different ``geometry`` than the one provided. guidance: A consumer who translates the geometry must not reattach the input (pre-translation) molecule schema instance to any output (post-translation) origin-sensitive results (e.g., an ordinary energy when EFP present).",
                    "default": false,
                    "type": "boolean"
                },
                "fix_orientation": {
                    "title": "Fix Orientation",
                    "description": "Whether rotation of geometry is allowed (fix F) or disallowed (fix T). When False, QCElemental will pre-process the Molecule object to orient via the intertial tensor, resulting in a different ``geometry`` than the one provided. guidance: A consumer who rotates the geometry must not reattach the input (pre-rotation) molecule schema instance to any output (post-rotation) frame-sensitive results (e.g., molecular vibrations).",
                    "default": false,
                    "type": "boolean"
                },
                "fix_symmetry": {
                    "title": "Fix Symmetry",
                    "description": "Maximal point group symmetry which ``geometry`` should be treated. Lowercase.",
                    "type": "string"
                },
                "provenance": {
                    "title": "Provenance",
                    "description": "The provenance information about how this Molecule (and its attributes) were generated, provided, and manipulated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Provenance"
                        }
                    ]
                },
                "id": {
                    "title": "Id",
                    "description": "A unique identifier for this Molecule object. This field exists primarily for Databases (e.g. Fractal's Server) to track and lookup this specific object and should virtually never need to be manually set."
                },
                "extras": {
                    "title": "Extras",
                    "description": "Additional information to bundle with the molecule. Use for schema development and scratch space.",
                    "type": "object"
                }
            },
            "required": [
                "symbols",
                "geometry"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-04/schema#"
        },
        "DriverEnum": {
            "title": "DriverEnum",
            "description": "Allowed computation driver values.",
            "enum": [
                "energy",
                "gradient",
                "hessian",
                "properties"
            ],
            "type": "string"
        },
        "HarmonicType": {
            "title": "HarmonicType",
            "description": "The angular momentum representation of a shell.",
            "enum": [
                "spherical",
                "cartesian"
            ],
            "type": "string"
        },
        "ElectronShell": {
            "title": "ElectronShell",
            "description": "Information for a single electronic shell.",
            "type": "object",
            "properties": {
                "angular_momentum": {
                    "title": "Angular Momentum",
                    "description": "Angular momentum for the shell as an array of integers.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "uniqueItems": true
                },
                "harmonic_type": {
                    "$ref": "#/definitions/HarmonicType"
                },
                "exponents": {
                    "title": "Exponents",
                    "description": "Exponents for the contracted shell.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "coefficients": {
                    "title": "Coefficients",
                    "description": "General contraction coefficients for the shell; individual list components will be the individual segment contraction coefficients.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "minItems": 1
                    }
                }
            },
            "required": [
                "angular_momentum",
                "harmonic_type",
                "exponents",
                "coefficients"
            ],
            "additionalProperties": false
        },
        "ECPType": {
            "title": "ECPType",
            "description": "The type of the ECP potential.",
            "enum": [
                "scalar",
                "spinorbit"
            ],
            "type": "string"
        },
        "ECPPotential": {
            "title": "ECPPotential",
            "description": "Information for a single ECP potential.",
            "type": "object",
            "properties": {
                "ecp_type": {
                    "$ref": "#/definitions/ECPType"
                },
                "angular_momentum": {
                    "title": "Angular Momentum",
                    "description": "Angular momentum for the potential as an array of integers.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "uniqueItems": true
                },
                "r_exponents": {
                    "title": "R Exponents",
                    "description": "Exponents of the 'r' term.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "gaussian_exponents": {
                    "title": "Gaussian Exponents",
                    "description": "Exponents of the 'gaussian' term.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "coefficients": {
                    "title": "Coefficients",
                    "description": "General contraction coefficients for the potential; individual list components will be the individual segment contraction coefficients.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "minItems": 1
                    }
                }
            },
            "required": [
                "ecp_type",
                "angular_momentum",
                "r_exponents",
                "gaussian_exponents",
                "coefficients"
            ],
            "additionalProperties": false
        },
        "BasisCenter": {
            "title": "BasisCenter",
            "description": "Data for a single atom/center in a basis set.\n\nParameters\n----------\nelectron_shells : :class:`ElectronShell`\n    Electronic shells for this center.\necp_electrons : int, Default: 0\n    Number of electrons replaced by ECP, MCP, or other field potentials.\necp_potentials : :class:`ECPPotential`, Optional\n    ECPs, MCPs, or other field potentials for this center.",
            "type": "object",
            "properties": {
                "electron_shells": {
                    "title": "Electron Shells",
                    "description": "Electronic shells for this center.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElectronShell"
                    },
                    "uniqueItems": true
                },
                "ecp_electrons": {
                    "title": "Ecp Electrons",
                    "description": "Number of electrons replaced by ECP, MCP, or other field potentials.",
                    "default": 0,
                    "type": "integer"
                },
                "ecp_potentials": {
                    "title": "Ecp Potentials",
                    "description": "ECPs, MCPs, or other field potentials for this center.",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ECPPotential"
                    },
                    "uniqueItems": true
                }
            },
            "required": [
                "electron_shells"
            ],
            "additionalProperties": false
        },
        "BasisSet": {
            "title": "BasisSet",
            "description": "A quantum chemistry basis description.\n\n\nParameters\n----------\nschema_name : ConstrainedStrValue, Default: qcschema_basis\n    The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nname : str\n    The standard basis name if available (e.g., 'cc-pVDZ').\ndescription : str, Optional\n    Brief description of the basis set.\ncenter_data : :class:`BasisCenter`\n    Shared basis data for all atoms/centers in the parent molecule\natom_map : List[str]\n    Mapping of all atoms/centers in the parent molecule to centers in ``center_data``.\nnbf : int, Optional\n    The number of basis functions. Use for convenience or as checksum",
            "type": "object",
            "properties": {
                "schema_name": {
                    "title": "Schema Name",
                    "description": "The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.",
                    "default": "qcschema_basis",
                    "pattern": "^(qcschema_basis)$",
                    "type": "string"
                },
                "schema_version": {
                    "title": "Schema Version",
                    "description": "The version number of ``schema_name`` to which this model conforms.",
                    "default": 1,
                    "type": "integer"
                },
                "name": {
                    "title": "Name",
                    "description": "The standard basis name if available (e.g., 'cc-pVDZ').",
                    "type": "string"
                },
                "description": {
                    "title": "Description",
                    "description": "Brief description of the basis set.",
                    "type": "string"
                },
                "center_data": {
                    "title": "Center Data",
                    "description": "Shared basis data for all atoms/centers in the parent molecule",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/BasisCenter"
                    }
                },
                "atom_map": {
                    "title": "Atom Map",
                    "description": "Mapping of all atoms/centers in the parent molecule to centers in ``center_data``.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nbf": {
                    "title": "Nbf",
                    "description": "The number of basis functions. Use for convenience or as checksum",
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "center_data",
                "atom_map"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-04/schema#"
        },
        "Model": {
            "title": "Model",
            "description": "The computational molecular sciences model to run.\n\nParameters\n----------\nmethod : str\n    The quantum chemistry method to evaluate (e.g., B3LYP, PBE, ...). For MM, name of the force field.\nbasis : Union[str, :class:`BasisSet`], Optional\n    The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...). Can be ``None`` for methods without basis sets. For molecular mechanics, name of the atom-typer.",
            "type": "object",
            "properties": {
                "method": {
                    "title": "Method",
                    "description": "The quantum chemistry method to evaluate (e.g., B3LYP, PBE, ...). For MM, name of the force field.",
                    "type": "string"
                },
                "basis": {
                    "title": "Basis",
                    "description": "The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...). Can be ``None`` for methods without basis sets. For molecular mechanics, name of the atom-typer.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/definitions/BasisSet"
                        }
                    ]
                }
            },
            "required": [
                "method"
            ]
        },
        "WavefunctionProtocolEnum": {
            "title": "WavefunctionProtocolEnum",
            "description": "Wavefunction to keep from a computation.",
            "enum": [
                "all",
                "orbitals_and_eigenvalues",
                "return_results",
                "none"
            ],
            "type": "string"
        },
        "ErrorCorrectionProtocol": {
            "title": "ErrorCorrectionProtocol",
            "description": "Configuration for how QCEngine handles error correction\n\n    WARNING: These protocols are currently experimental and only supported by NWChem tasks\n\n\nParameters\n----------\ndefault_policy : bool, Default: True\n    Whether to allow error corrections to be used if not directly specified in `policies`\npolicies : name='policies' type=Optional[Mapping[str, bool]] required=False default=None, Optional\n    Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used.",
            "type": "object",
            "properties": {
                "default_policy": {
                    "title": "Default Policy",
                    "description": "Whether to allow error corrections to be used if not directly specified in `policies`",
                    "default": true,
                    "type": "boolean"
                },
                "policies": {
                    "title": "Policies",
                    "description": "Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            },
            "additionalProperties": false
        },
        "AtomicResultProtocols": {
            "title": "AtomicResultProtocols",
            "description": "Protocols regarding the manipulation of computational result data.\n\nParameters\n----------\nwavefunction : {all,orbitals_and_eigenvalues,return_results,none}, Default: none\n    Wavefunction to keep from a computation.\nstdout : bool, Default: True\n    Primary output file to keep from the computation\nerror_correction : :class:`ErrorCorrectionProtocol`, Optional\n    Policies for error correction",
            "type": "object",
            "properties": {
                "wavefunction": {
                    "$ref": "#/definitions/WavefunctionProtocolEnum"
                },
                "stdout": {
                    "title": "Stdout",
                    "description": "Primary output file to keep from the computation",
                    "default": true,
                    "type": "boolean"
                },
                "error_correction": {
                    "title": "Error Correction",
                    "description": "Policies for error correction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ErrorCorrectionProtocol"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "AtomicInput": {
            "title": "AtomicInput",
            "description": "The MolSSI Quantum Chemistry Schema\n\nParameters\n----------\nid : str, Optional\n    The optional ID for the computation.\nschema_name : ConstrainedStrValue, Default: qcschema_input\n    The QCSchema specification this model conforms to. Explicitly fixed as qcschema_input.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nmolecule : :class:`Molecule`\n    The molecule to use in the computation.\ndriver : {energy,gradient,hessian,properties}\n    Allowed computation driver values.\nmodel : :class:`Model`\n    The computational molecular sciences model to run.\nkeywords : Dict[str, Any], Default: {}\n    The program-specific keywords to be used.\nprotocols : :class:`AtomicResultProtocols`, Optional\n    Protocols regarding the manipulation of computational result data.\nextras : Dict[str, Any], Default: {}\n    Additional information to bundle with the computation. Use for schema development and scratch space.\nprovenance : :class:`Provenance`, Optional\n    Provenance information.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "description": "The optional ID for the computation.",
                    "type": "string"
                },
                "schema_name": {
                    "title": "Schema Name",
                    "description": "The QCSchema specification this model conforms to. Explicitly fixed as qcschema_input.",
                    "default": "qcschema_input",
                    "pattern": "^(qc_?schema_input)$",
                    "type": "string"
                },
                "schema_version": {
                    "title": "Schema Version",
                    "description": "The version number of ``schema_name`` to which this model conforms.",
                    "default": 1,
                    "type": "integer"
                },
                "molecule": {
                    "title": "Molecule",
                    "description": "The molecule to use in the computation.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Molecule"
                        }
                    ]
                },
                "driver": {
                    "$ref": "#/definitions/DriverEnum"
                },
                "model": {
                    "title": "Model",
                    "description": "The computational molecular sciences model to run.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Model"
                        }
                    ]
                },
                "keywords": {
                    "title": "Keywords",
                    "description": "The program-specific keywords to be used.",
                    "default": {},
                    "type": "object"
                },
                "protocols": {
                    "title": "Protocols",
                    "description": "Protocols regarding the manipulation of computational result data.",
                    "default": {},
                    "allOf": [
                        {
                            "$ref": "#/definitions/AtomicResultProtocols"
                        }
                    ]
                },
                "extras": {
                    "title": "Extras",
                    "description": "Additional information to bundle with the computation. Use for schema development and scratch space.",
                    "default": {},
                    "type": "object"
                },
                "provenance": {
                    "title": "Provenance",
                    "description": "Provenance information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Provenance"
                        }
                    ]
                }
            },
            "required": [
                "molecule",
                "driver",
                "model"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-04/schema#"
        },
        "AtomicResultProperties": {
            "title": "AtomicResultProperties",
            "description": "Named properties of quantum chemistry computations following the MolSSI QCSchema.\n\n    Notes\n    -----\n    All arrays are stored flat but must be reshapable into the dimensions in attribute ``shape``, with abbreviations as follows:\n        nao: number of atomic orbitals = calcinfo_nbasis\n        nmo: number of molecular orbitals\n\n\nParameters\n----------\ncalcinfo_nbasis : int, Optional\n    The number of basis functions for the computation.\ncalcinfo_nmo : int, Optional\n    The number of molecular orbitals for the computation.\ncalcinfo_nalpha : int, Optional\n    The number of alpha electrons in the computation.\ncalcinfo_nbeta : int, Optional\n    The number of beta electrons in the computation.\ncalcinfo_natom : int, Optional\n    The number of atoms in the computation.\nnuclear_repulsion_energy : float, Optional\n    The nuclear repulsion energy.\nreturn_energy : float, Optional\n    The energy of the requested method, identical to ``return_result`` for ``driver=energy`` computations.\nscf_one_electron_energy : float, Optional\n    The one-electron (core Hamiltonian) energy contribution to the total SCF energy.\nscf_two_electron_energy : float, Optional\n    The two-electron energy contribution to the total SCF energy.\nscf_vv10_energy : float, Optional\n    The VV10 functional energy contribution to the total SCF energy.\nscf_xc_energy : float, Optional\n    The functional (XC) energy contribution to the total SCF energy.\nscf_dispersion_correction_energy : float, Optional\n    The dispersion correction appended to an underlying functional when a DFT-D method is requested.\nscf_dipole_moment : Array, Optional\n    The SCF X, Y, and Z dipole components\nscf_quadrupole_moment : Array, Optional\n    The quadrupole components (redundant; 6 unique).\nscf_total_energy : float, Optional\n    The total electronic energy of the SCF stage of the calculation.\nscf_iterations : int, Optional\n    The number of SCF iterations taken before convergence.\nmp2_same_spin_correlation_energy : float, Optional\n    The portion of MP2 doubles correlation energy from same-spin (i.e. triplet) correlations, without any user scaling.\nmp2_opposite_spin_correlation_energy : float, Optional\n    The portion of MP2 doubles correlation energy from opposite-spin (i.e. singlet) correlations, without any user scaling.\nmp2_singles_energy : float, Optional\n    The singles portion of the MP2 correlation energy. Zero except in ROHF.\nmp2_doubles_energy : float, Optional\n    The doubles portion of the MP2 correlation energy including same-spin and opposite-spin correlations.\nmp2_total_correlation_energy : float, Optional\n    The MP2 correlation energy.\nmp2_correlation_energy : float, Optional\n    The MP2 correlation energy.\nmp2_total_energy : float, Optional\n    The total MP2 energy (MP2 correlation energy + HF energy).\nmp2_dipole_moment : Array, Optional\n    The MP2 X, Y, and Z dipole components.\nccsd_same_spin_correlation_energy : float, Optional\n    The portion of CCSD doubles correlation energy from same-spin (i.e. triplet) correlations, without any user scaling.\nccsd_opposite_spin_correlation_energy : float, Optional\n    The portion of CCSD doubles correlation energy from opposite-spin (i.e. singlet) correlations, without any user scaling.\nccsd_singles_energy : float, Optional\n    The singles portion of the CCSD correlation energy. Zero except in ROHF.\nccsd_doubles_energy : float, Optional\n    The doubles portion of the CCSD correlation energy including same-spin and opposite-spin correlations.\nccsd_correlation_energy : float, Optional\n    The CCSD correlation energy.\nccsd_total_energy : float, Optional\n    The total CCSD energy (CCSD correlation energy + HF energy).\nccsd_dipole_moment : Array, Optional\n    The CCSD X, Y, and Z dipole components.\nccsd_iterations : int, Optional\n    The number of CCSD iterations taken before convergence.\nccsd_prt_pr_correlation_energy : float, Optional\n    The CCSD(T) correlation energy.\nccsd_prt_pr_total_energy : float, Optional\n    The total CCSD(T) energy (CCSD(T) correlation energy + HF energy).\nccsd_prt_pr_dipole_moment : Array, Optional\n    The CCSD(T) X, Y, and Z dipole components.\nccsdt_correlation_energy : float, Optional\n    The CCSDT correlation energy.\nccsdt_total_energy : float, Optional\n    The total CCSDT energy (CCSDT correlation energy + HF energy).\nccsdt_dipole_moment : Array, Optional\n    The CCSDT X, Y, and Z dipole components.\nccsdt_iterations : int, Optional\n    The number of CCSDT iterations taken before convergence.\nccsdtq_correlation_energy : float, Optional\n    The CCSDTQ correlation energy.\nccsdtq_total_energy : float, Optional\n    The total CCSDTQ energy (CCSDTQ correlation energy + HF energy).\nccsdtq_dipole_moment : Array, Optional\n    The CCSDTQ X, Y, and Z dipole components.\nccsdtq_iterations : int, Optional\n    The number of CCSDTQ iterations taken before convergence.",
            "type": "object",
            "properties": {
                "calcinfo_nbasis": {
                    "title": "Calcinfo Nbasis",
                    "description": "The number of basis functions for the computation.",
                    "type": "integer"
                },
                "calcinfo_nmo": {
                    "title": "Calcinfo Nmo",
                    "description": "The number of molecular orbitals for the computation.",
                    "type": "integer"
                },
                "calcinfo_nalpha": {
                    "title": "Calcinfo Nalpha",
                    "description": "The number of alpha electrons in the computation.",
                    "type": "integer"
                },
                "calcinfo_nbeta": {
                    "title": "Calcinfo Nbeta",
                    "description": "The number of beta electrons in the computation.",
                    "type": "integer"
                },
                "calcinfo_natom": {
                    "title": "Calcinfo Natom",
                    "description": "The number of atoms in the computation.",
                    "type": "integer"
                },
                "nuclear_repulsion_energy": {
                    "title": "Nuclear Repulsion Energy",
                    "description": "The nuclear repulsion energy.",
                    "type": "number"
                },
                "return_energy": {
                    "title": "Return Energy",
                    "description": "The energy of the requested method, identical to ``return_result`` for ``driver=energy`` computations.",
                    "type": "number"
                },
                "scf_one_electron_energy": {
                    "title": "Scf One Electron Energy",
                    "description": "The one-electron (core Hamiltonian) energy contribution to the total SCF energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_two_electron_energy": {
                    "title": "Scf Two Electron Energy",
                    "description": "The two-electron energy contribution to the total SCF energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_vv10_energy": {
                    "title": "Scf Vv10 Energy",
                    "description": "The VV10 functional energy contribution to the total SCF energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_xc_energy": {
                    "title": "Scf Xc Energy",
                    "description": "The functional (XC) energy contribution to the total SCF energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_dispersion_correction_energy": {
                    "title": "Scf Dispersion Correction Energy",
                    "description": "The dispersion correction appended to an underlying functional when a DFT-D method is requested.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_dipole_moment": {
                    "title": "Scf Dipole Moment",
                    "description": "The SCF X, Y, and Z dipole components",
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_quadrupole_moment": {
                    "title": "Scf Quadrupole Moment",
                    "description": "The quadrupole components (redundant; 6 unique).",
                    "shape": [
                        3,
                        3
                    ],
                    "units": "e a0^2",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_total_energy": {
                    "title": "Scf Total Energy",
                    "description": "The total electronic energy of the SCF stage of the calculation.",
                    "units": "E_h",
                    "type": "number"
                },
                "scf_iterations": {
                    "title": "Scf Iterations",
                    "description": "The number of SCF iterations taken before convergence.",
                    "type": "integer"
                },
                "mp2_same_spin_correlation_energy": {
                    "title": "Mp2 Same Spin Correlation Energy",
                    "description": "The portion of MP2 doubles correlation energy from same-spin (i.e. triplet) correlations, without any user scaling.",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_opposite_spin_correlation_energy": {
                    "title": "Mp2 Opposite Spin Correlation Energy",
                    "description": "The portion of MP2 doubles correlation energy from opposite-spin (i.e. singlet) correlations, without any user scaling.",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_singles_energy": {
                    "title": "Mp2 Singles Energy",
                    "description": "The singles portion of the MP2 correlation energy. Zero except in ROHF.",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_doubles_energy": {
                    "title": "Mp2 Doubles Energy",
                    "description": "The doubles portion of the MP2 correlation energy including same-spin and opposite-spin correlations.",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_total_correlation_energy": {
                    "title": "Mp2 Total Correlation Energy",
                    "description": "The MP2 correlation energy.",
                    "type": "number"
                },
                "mp2_correlation_energy": {
                    "title": "Mp2 Correlation Energy",
                    "description": "The MP2 correlation energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_total_energy": {
                    "title": "Mp2 Total Energy",
                    "description": "The total MP2 energy (MP2 correlation energy + HF energy).",
                    "units": "E_h",
                    "type": "number"
                },
                "mp2_dipole_moment": {
                    "title": "Mp2 Dipole Moment",
                    "description": "The MP2 X, Y, and Z dipole components.",
                    "shape": [
                        3
                    ],
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ccsd_same_spin_correlation_energy": {
                    "title": "Ccsd Same Spin Correlation Energy",
                    "description": "The portion of CCSD doubles correlation energy from same-spin (i.e. triplet) correlations, without any user scaling.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_opposite_spin_correlation_energy": {
                    "title": "Ccsd Opposite Spin Correlation Energy",
                    "description": "The portion of CCSD doubles correlation energy from opposite-spin (i.e. singlet) correlations, without any user scaling.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_singles_energy": {
                    "title": "Ccsd Singles Energy",
                    "description": "The singles portion of the CCSD correlation energy. Zero except in ROHF.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_doubles_energy": {
                    "title": "Ccsd Doubles Energy",
                    "description": "The doubles portion of the CCSD correlation energy including same-spin and opposite-spin correlations.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_correlation_energy": {
                    "title": "Ccsd Correlation Energy",
                    "description": "The CCSD correlation energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_total_energy": {
                    "title": "Ccsd Total Energy",
                    "description": "The total CCSD energy (CCSD correlation energy + HF energy).",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_dipole_moment": {
                    "title": "Ccsd Dipole Moment",
                    "description": "The CCSD X, Y, and Z dipole components.",
                    "shape": [
                        3
                    ],
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ccsd_iterations": {
                    "title": "Ccsd Iterations",
                    "description": "The number of CCSD iterations taken before convergence.",
                    "type": "integer"
                },
                "ccsd_prt_pr_correlation_energy": {
                    "title": "Ccsd Prt Pr Correlation Energy",
                    "description": "The CCSD(T) correlation energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_prt_pr_total_energy": {
                    "title": "Ccsd Prt Pr Total Energy",
                    "description": "The total CCSD(T) energy (CCSD(T) correlation energy + HF energy).",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsd_prt_pr_dipole_moment": {
                    "title": "Ccsd Prt Pr Dipole Moment",
                    "description": "The CCSD(T) X, Y, and Z dipole components.",
                    "shape": [
                        3
                    ],
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ccsdt_correlation_energy": {
                    "title": "Ccsdt Correlation Energy",
                    "description": "The CCSDT correlation energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsdt_total_energy": {
                    "title": "Ccsdt Total Energy",
                    "description": "The total CCSDT energy (CCSDT correlation energy + HF energy).",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsdt_dipole_moment": {
                    "title": "Ccsdt Dipole Moment",
                    "description": "The CCSDT X, Y, and Z dipole components.",
                    "shape": [
                        3
                    ],
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ccsdt_iterations": {
                    "title": "Ccsdt Iterations",
                    "description": "The number of CCSDT iterations taken before convergence.",
                    "type": "integer"
                },
                "ccsdtq_correlation_energy": {
                    "title": "Ccsdtq Correlation Energy",
                    "description": "The CCSDTQ correlation energy.",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsdtq_total_energy": {
                    "title": "Ccsdtq Total Energy",
                    "description": "The total CCSDTQ energy (CCSDTQ correlation energy + HF energy).",
                    "units": "E_h",
                    "type": "number"
                },
                "ccsdtq_dipole_moment": {
                    "title": "Ccsdtq Dipole Moment",
                    "description": "The CCSDTQ X, Y, and Z dipole components.",
                    "shape": [
                        3
                    ],
                    "units": "e a0",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ccsdtq_iterations": {
                    "title": "Ccsdtq Iterations",
                    "description": "The number of CCSDTQ iterations taken before convergence.",
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "WavefunctionProperties": {
            "title": "WavefunctionProperties",
            "description": "Wavefunction properties resulting from a computation. Matrix quantities are stored in column-major order. Presence and contents configurable by protocol.\n\nParameters\n----------\nbasis : :class:`BasisSet`\n\n    A quantum chemistry basis description.\n\n\n    Parameters\n    ----------\n    schema_name : ConstrainedStrValue, Default: qcschema_basis\n        The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.\n    schema_version : int, Default: 1\n        The version number of ``schema_name`` to which this model conforms.\n    name : str\n        The standard basis name if available (e.g., 'cc-pVDZ').\n    description : str, Optional\n        Brief description of the basis set.\n    center_data : :class:`BasisCenter`\n        Shared basis data for all atoms/centers in the parent molecule\n    atom_map : List[str]\n        Mapping of all atoms/centers in the parent molecule to centers in ``center_data``.\n    nbf : int, Optional\n        The number of basis functions. Use for convenience or as checksum\n\nrestricted : bool\n    If the computation was restricted or not (alpha == beta). If True, all beta quantities are skipped.\nh_core_a : Array, Optional\n    Alpha-spin core (one-electron) Hamiltonian in the AO basis.\nh_core_b : Array, Optional\n    Beta-spin core (one-electron) Hamiltonian in the AO basis.\nh_effective_a : Array, Optional\n    Alpha-spin effective core (one-electron) Hamiltonian in the AO basis.\nh_effective_b : Array, Optional\n    Beta-spin effective core (one-electron) Hamiltonian in the AO basis\nscf_orbitals_a : Array, Optional\n    SCF alpha-spin orbitals in the AO basis.\nscf_orbitals_b : Array, Optional\n    SCF beta-spin orbitals in the AO basis.\nscf_density_a : Array, Optional\n    SCF alpha-spin density matrix in the AO basis.\nscf_density_b : Array, Optional\n    SCF beta-spin density matrix in the AO basis.\nscf_fock_a : Array, Optional\n    SCF alpha-spin Fock matrix in the AO basis.\nscf_fock_b : Array, Optional\n    SCF beta-spin Fock matrix in the AO basis.\nscf_eigenvalues_a : Array, Optional\n    SCF alpha-spin orbital eigenvalues.\nscf_eigenvalues_b : Array, Optional\n    SCF beta-spin orbital eigenvalues.\nscf_occupations_a : Array, Optional\n    SCF alpha-spin orbital occupations.\nscf_occupations_b : Array, Optional\n    SCF beta-spin orbital occupations.\nscf_coulomb_a : Array, Optional\n    SCF alpha-spin Coulomb matrix in the AO basis.\nscf_coulomb_b : Array, Optional\n    SCF beta-spin Coulomb matrix in the AO basis.\nscf_exchange_a : Array, Optional\n    SCF alpha-spin exchange matrix in the AO basis.\nscf_exchange_b : Array, Optional\n    SCF beta-spin exchange matrix in the AO basis.\nlocalized_orbitals_a : Array, Optional\n    Localized alpha-spin orbitals in the AO basis. All nmo orbitals are included, even if only a subset were localized.\nlocalized_orbitals_b : Array, Optional\n    Localized beta-spin orbitals in the AO basis. All nmo orbitals are included, even if only a subset were localized.\nlocalized_fock_a : Array, Optional\n    Alpha-spin Fock matrix in the localized molecular orbital basis. All nmo orbitals are included, even if only a subset were localized.\nlocalized_fock_b : Array, Optional\n    Beta-spin Fock matrix in the localized molecular orbital basis. All nmo orbitals are included, even if only a subset were localized.\norbitals_a : str, Optional\n    Index to the alpha-spin orbitals of the primary return.\norbitals_b : str, Optional\n    Index to the beta-spin orbitals of the primary return.\ndensity_a : str, Optional\n    Index to the alpha-spin density of the primary return.\ndensity_b : str, Optional\n    Index to the beta-spin density of the primary return.\nfock_a : str, Optional\n    Index to the alpha-spin Fock matrix of the primary return.\nfock_b : str, Optional\n    Index to the beta-spin Fock matrix of the primary return.\neigenvalues_a : str, Optional\n    Index to the alpha-spin orbital eigenvalues of the primary return.\neigenvalues_b : str, Optional\n    Index to the beta-spin orbital eigenvalues of the primary return.\noccupations_a : str, Optional\n    Index to the alpha-spin orbital occupations of the primary return.\noccupations_b : str, Optional\n    Index to the beta-spin orbital occupations of the primary return.",
            "type": "object",
            "properties": {
                "basis": {
                    "title": "Basis",
                    "description": "\nA quantum chemistry basis description.\n\n\nParameters\n----------\nschema_name : ConstrainedStrValue, Default: qcschema_basis\n    The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nname : str\n    The standard basis name if available (e.g., 'cc-pVDZ').\ndescription : str, Optional\n    Brief description of the basis set.\ncenter_data : :class:`BasisCenter`\n    Shared basis data for all atoms/centers in the parent molecule\natom_map : List[str]\n    Mapping of all atoms/centers in the parent molecule to centers in ``center_data``.\nnbf : int, Optional\n    The number of basis functions. Use for convenience or as checksum\n",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BasisSet"
                        }
                    ]
                },
                "restricted": {
                    "title": "Restricted",
                    "description": "If the computation was restricted or not (alpha == beta). If True, all beta quantities are skipped.",
                    "type": "boolean"
                },
                "h_core_a": {
                    "title": "H Core A",
                    "description": "Alpha-spin core (one-electron) Hamiltonian in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "h_core_b": {
                    "title": "H Core B",
                    "description": "Beta-spin core (one-electron) Hamiltonian in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "h_effective_a": {
                    "title": "H Effective A",
                    "description": "Alpha-spin effective core (one-electron) Hamiltonian in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "h_effective_b": {
                    "title": "H Effective B",
                    "description": "Beta-spin effective core (one-electron) Hamiltonian in the AO basis",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_orbitals_a": {
                    "title": "Scf Orbitals A",
                    "description": "SCF alpha-spin orbitals in the AO basis.",
                    "shape": [
                        "nao",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_orbitals_b": {
                    "title": "Scf Orbitals B",
                    "description": "SCF beta-spin orbitals in the AO basis.",
                    "shape": [
                        "nao",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_density_a": {
                    "title": "Scf Density A",
                    "description": "SCF alpha-spin density matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_density_b": {
                    "title": "Scf Density B",
                    "description": "SCF beta-spin density matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_fock_a": {
                    "title": "Scf Fock A",
                    "description": "SCF alpha-spin Fock matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_fock_b": {
                    "title": "Scf Fock B",
                    "description": "SCF beta-spin Fock matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_eigenvalues_a": {
                    "title": "Scf Eigenvalues A",
                    "description": "SCF alpha-spin orbital eigenvalues.",
                    "shape": [
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_eigenvalues_b": {
                    "title": "Scf Eigenvalues B",
                    "description": "SCF beta-spin orbital eigenvalues.",
                    "shape": [
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_occupations_a": {
                    "title": "Scf Occupations A",
                    "description": "SCF alpha-spin orbital occupations.",
                    "shape": [
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_occupations_b": {
                    "title": "Scf Occupations B",
                    "description": "SCF beta-spin orbital occupations.",
                    "shape": [
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_coulomb_a": {
                    "title": "Scf Coulomb A",
                    "description": "SCF alpha-spin Coulomb matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_coulomb_b": {
                    "title": "Scf Coulomb B",
                    "description": "SCF beta-spin Coulomb matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_exchange_a": {
                    "title": "Scf Exchange A",
                    "description": "SCF alpha-spin exchange matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scf_exchange_b": {
                    "title": "Scf Exchange B",
                    "description": "SCF beta-spin exchange matrix in the AO basis.",
                    "shape": [
                        "nao",
                        "nao"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "localized_orbitals_a": {
                    "title": "Localized Orbitals A",
                    "description": "Localized alpha-spin orbitals in the AO basis. All nmo orbitals are included, even if only a subset were localized.",
                    "shape": [
                        "nao",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "localized_orbitals_b": {
                    "title": "Localized Orbitals B",
                    "description": "Localized beta-spin orbitals in the AO basis. All nmo orbitals are included, even if only a subset were localized.",
                    "shape": [
                        "nao",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "localized_fock_a": {
                    "title": "Localized Fock A",
                    "description": "Alpha-spin Fock matrix in the localized molecular orbital basis. All nmo orbitals are included, even if only a subset were localized.",
                    "shape": [
                        "nmo",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "localized_fock_b": {
                    "title": "Localized Fock B",
                    "description": "Beta-spin Fock matrix in the localized molecular orbital basis. All nmo orbitals are included, even if only a subset were localized.",
                    "shape": [
                        "nmo",
                        "nmo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "orbitals_a": {
                    "title": "Orbitals A",
                    "description": "Index to the alpha-spin orbitals of the primary return.",
                    "type": "string"
                },
                "orbitals_b": {
                    "title": "Orbitals B",
                    "description": "Index to the beta-spin orbitals of the primary return.",
                    "type": "string"
                },
                "density_a": {
                    "title": "Density A",
                    "description": "Index to the alpha-spin density of the primary return.",
                    "type": "string"
                },
                "density_b": {
                    "title": "Density B",
                    "description": "Index to the beta-spin density of the primary return.",
                    "type": "string"
                },
                "fock_a": {
                    "title": "Fock A",
                    "description": "Index to the alpha-spin Fock matrix of the primary return.",
                    "type": "string"
                },
                "fock_b": {
                    "title": "Fock B",
                    "description": "Index to the beta-spin Fock matrix of the primary return.",
                    "type": "string"
                },
                "eigenvalues_a": {
                    "title": "Eigenvalues A",
                    "description": "Index to the alpha-spin orbital eigenvalues of the primary return.",
                    "type": "string"
                },
                "eigenvalues_b": {
                    "title": "Eigenvalues B",
                    "description": "Index to the beta-spin orbital eigenvalues of the primary return.",
                    "type": "string"
                },
                "occupations_a": {
                    "title": "Occupations A",
                    "description": "Index to the alpha-spin orbital occupations of the primary return.",
                    "type": "string"
                },
                "occupations_b": {
                    "title": "Occupations B",
                    "description": "Index to the beta-spin orbital occupations of the primary return.",
                    "type": "string"
                }
            },
            "required": [
                "basis",
                "restricted"
            ],
            "additionalProperties": false
        },
        "ComputeError": {
            "title": "ComputeError",
            "description": "Complete description of the error from an unsuccessful program execution.\n\nParameters\n----------\nerror_type : str\n    The type of error which was thrown. Restrict this field to short classifiers e.g. 'input_error'. Suggested classifiers: https://github.com/MolSSI/QCEngine/blob/master/qcengine/exceptions.py\nerror_message : str\n    Text associated with the thrown error. This is often the backtrace, but it can contain additional information as well.\nextras : Dict[str, Any], Optional\n    Additional information to bundle with the error.",
            "type": "object",
            "properties": {
                "error_type": {
                    "title": "Error Type",
                    "description": "The type of error which was thrown. Restrict this field to short classifiers e.g. 'input_error'. Suggested classifiers: https://github.com/MolSSI/QCEngine/blob/master/qcengine/exceptions.py",
                    "type": "string"
                },
                "error_message": {
                    "title": "Error Message",
                    "description": "Text associated with the thrown error. This is often the backtrace, but it can contain additional information as well.",
                    "type": "string"
                },
                "extras": {
                    "title": "Extras",
                    "description": "Additional information to bundle with the error.",
                    "type": "object"
                }
            },
            "required": [
                "error_type",
                "error_message"
            ],
            "additionalProperties": false
        },
        "AtomicResult": {
            "title": "AtomicResult",
            "description": "Results from a CMS program execution.\n\nParameters\n----------\nid : str, Optional\n    The optional ID for the computation.\nschema_name : ConstrainedStrValue, Default: qcschema_output\n    The QCSchema specification this model conforms to. Explicitly fixed as qcschema_output.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nmolecule : :class:`Molecule`\n    The molecule to use in the computation.\ndriver : {energy,gradient,hessian,properties}\n    Allowed computation driver values.\nmodel : :class:`Model`\n    The computational molecular sciences model to run.\nkeywords : Dict[str, Any], Default: {}\n    The program-specific keywords to be used.\nprotocols : :class:`AtomicResultProtocols`, Optional\n    Protocols regarding the manipulation of computational result data.\nextras : Dict[str, Any], Default: {}\n    Additional information to bundle with the computation. Use for schema development and scratch space.\nprovenance : :class:`Provenance`\n    Provenance information.\nproperties : :class:`AtomicResultProperties`\n    Named properties of quantum chemistry computations following the MolSSI QCSchema.\n\n        Notes\n        -----\n        All arrays are stored flat but must be reshapable into the dimensions in attribute ``shape``, with abbreviations as follows:\n            nao: number of atomic orbitals = calcinfo_nbasis\n            nmo: number of molecular orbitals\n    \nwavefunction : :class:`WavefunctionProperties`, Optional\n    Wavefunction properties resulting from a computation. Matrix quantities are stored in column-major order. Presence and contents configurable by protocol.\nreturn_result : Union[float, Array, Dict[str, Any]]\n    The primary return specified by the ``driver`` field. Scalar if energy; array if gradient or hessian; dictionary with property keys if properties.\nstdout : str, Optional\n    The primary logging output of the program, whether natively standard output or a file. Presence vs. absence (or null-ness?) configurable by protocol.\nstderr : str, Optional\n    The standard error of the program execution.\nsuccess : bool\n    The success of program execution. If False, other fields may be blank.\nerror : :class:`ComputeError`, Optional\n    Complete description of the error from an unsuccessful program execution.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "description": "The optional ID for the computation.",
                    "type": "string"
                },
                "schema_name": {
                    "title": "Schema Name",
                    "description": "The QCSchema specification this model conforms to. Explicitly fixed as qcschema_output.",
                    "default": "qcschema_output",
                    "pattern": "^(qc_?schema_output)$",
                    "type": "string"
                },
                "schema_version": {
                    "title": "Schema Version",
                    "description": "The version number of ``schema_name`` to which this model conforms.",
                    "default": 1,
                    "type": "integer"
                },
                "molecule": {
                    "title": "Molecule",
                    "description": "The molecule to use in the computation.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Molecule"
                        }
                    ]
                },
                "driver": {
                    "$ref": "#/definitions/DriverEnum"
                },
                "model": {
                    "title": "Model",
                    "description": "The computational molecular sciences model to run.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Model"
                        }
                    ]
                },
                "keywords": {
                    "title": "Keywords",
                    "description": "The program-specific keywords to be used.",
                    "default": {},
                    "type": "object"
                },
                "protocols": {
                    "title": "Protocols",
                    "description": "Protocols regarding the manipulation of computational result data.",
                    "default": {},
                    "allOf": [
                        {
                            "$ref": "#/definitions/AtomicResultProtocols"
                        }
                    ]
                },
                "extras": {
                    "title": "Extras",
                    "description": "Additional information to bundle with the computation. Use for schema development and scratch space.",
                    "default": {},
                    "type": "object"
                },
                "provenance": {
                    "title": "Provenance",
                    "description": "Provenance information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Provenance"
                        }
                    ]
                },
                "properties": {
                    "title": "Properties",
                    "description": "Named properties of quantum chemistry computations following the MolSSI QCSchema.\n\n    Notes\n    -----\n    All arrays are stored flat but must be reshapable into the dimensions in attribute ``shape``, with abbreviations as follows:\n        nao: number of atomic orbitals = calcinfo_nbasis\n        nmo: number of molecular orbitals\n    ",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AtomicResultProperties"
                        }
                    ]
                },
                "wavefunction": {
                    "title": "Wavefunction",
                    "description": "Wavefunction properties resulting from a computation. Matrix quantities are stored in column-major order. Presence and contents configurable by protocol.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/WavefunctionProperties"
                        }
                    ]
                },
                "return_result": {
                    "title": "Return Result",
                    "description": "The primary return specified by the ``driver`` field. Scalar if energy; array if gradient or hessian; dictionary with property keys if properties.",
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "number"
                            }
                        },
                        {
                            "type": "object"
                        }
                    ]
                },
                "stdout": {
                    "title": "Stdout",
                    "description": "The primary logging output of the program, whether natively standard output or a file. Presence vs. absence (or null-ness?) configurable by protocol.",
                    "type": "string"
                },
                "stderr": {
                    "title": "Stderr",
                    "description": "The standard error of the program execution.",
                    "type": "string"
                },
                "success": {
                    "title": "Success",
                    "description": "The success of program execution. If False, other fields may be blank.",
                    "type": "boolean"
                },
                "error": {
                    "title": "Error",
                    "description": "Complete description of the error from an unsuccessful program execution.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ComputeError"
                        }
                    ]
                }
            },
            "required": [
                "molecule",
                "driver",
                "model",
                "provenance",
                "properties",
                "return_result",
                "success"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-04/schema#"
        }
    }
}
