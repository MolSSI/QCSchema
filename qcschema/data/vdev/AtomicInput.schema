{"title": "AtomicInput", "description": "The MolSSI Quantum Chemistry Schema\n\nParameters\n----------\nid : str, Optional\n    An optional ID of the ResultInput object.\nschema_name : ConstrainedStrValue, Default: qcschema_input\n    The QCSchema specification this model conforms to. Explicitly fixed as qcschema_input.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nmolecule : :class:`Molecule`\n    The molecule to use in the computation.\ndriver : {energy,gradient,hessian,properties}\n    Allowed computation driver values.\nmodel : :class:`Model`\n\n        The computational molecular sciences model to run.\n    \nkeywords : Dict[str, Any], Default: {}\n    The program-specific keywords to be used.\nprotocols : :class:`AtomicResultProtocols`, Optional\n\n        Protocols regarding the manipulation of a Result output data.\n    \nextras : Dict[str, Any], Default: {}\n    Extra fields not part of the schema. Used for schema development and scratch space.\nprovenance : :class:`Provenance`, Optional\n\n        Provenance information.\n    ", "type": "object", "properties": {"id": {"title": "Id", "description": "An optional ID of the ResultInput object.", "type": "string"}, "schema_name": {"title": "Schema Name", "description": "The QCSchema specification this model conforms to. Explicitly fixed as qcschema_input.", "default": "qcschema_input", "pattern": "^(qc_?schema_input)$", "type": "string"}, "schema_version": {"title": "Schema Version", "description": "The version number of ``schema_name`` to which this model conforms.", "default": 1, "type": "integer"}, "molecule": {"title": "Molecule", "description": "The molecule to use in the computation.", "allOf": [{"$ref": "#/definitions/Molecule"}]}, "driver": {"$ref": "#/definitions/DriverEnum"}, "model": {"title": "Model", "description": "\n    The computational molecular sciences model to run.\n    ", "allOf": [{"$ref": "#/definitions/Model"}]}, "keywords": {"title": "Keywords", "description": "The program-specific keywords to be used.", "default": {}, "type": "object"}, "protocols": {"title": "Protocols", "description": "\n    Protocols regarding the manipulation of a Result output data.\n    ", "default": {}, "allOf": [{"$ref": "#/definitions/AtomicResultProtocols"}]}, "extras": {"title": "Extras", "description": "Extra fields not part of the schema. Used for schema development and scratch space.", "default": {}, "type": "object"}, "provenance": {"title": "Provenance", "description": "\n    Provenance information.\n    ", "allOf": [{"$ref": "#/definitions/Provenance"}]}}, "required": ["molecule", "driver", "model"], "additionalProperties": false, "$schema": "http://json-schema.org/draft-04/schema#", "definitions": {"Identifiers": {"title": "Identifiers", "description": "Canonical chemical identifiers\n\nParameters\n----------\nmolecule_hash : str, Optional\nmolecular_formula : str, Optional\nsmiles : str, Optional\ninchi : str, Optional\ninchikey : str, Optional\ncanonical_explicit_hydrogen_smiles : str, Optional\ncanonical_isomeric_explicit_hydrogen_mapped_smiles : str, Optional\ncanonical_isomeric_explicit_hydrogen_smiles : str, Optional\ncanonical_isomeric_smiles : str, Optional\ncanonical_smiles : str, Optional\npubchem_cid : str, Optional\n    PubChem Compound ID\npubchem_sid : str, Optional\n    PubChem Substance ID\npubchem_conformerid : str, Optional\n    PubChem Conformer ID", "type": "object", "properties": {"molecule_hash": {"title": "Molecule Hash", "type": "string"}, "molecular_formula": {"title": "Molecular Formula", "type": "string"}, "smiles": {"title": "Smiles", "type": "string"}, "inchi": {"title": "Inchi", "type": "string"}, "inchikey": {"title": "Inchikey", "type": "string"}, "canonical_explicit_hydrogen_smiles": {"title": "Canonical Explicit Hydrogen Smiles", "type": "string"}, "canonical_isomeric_explicit_hydrogen_mapped_smiles": {"title": "Canonical Isomeric Explicit Hydrogen Mapped Smiles", "type": "string"}, "canonical_isomeric_explicit_hydrogen_smiles": {"title": "Canonical Isomeric Explicit Hydrogen Smiles", "type": "string"}, "canonical_isomeric_smiles": {"title": "Canonical Isomeric Smiles", "type": "string"}, "canonical_smiles": {"title": "Canonical Smiles", "type": "string"}, "pubchem_cid": {"title": "Pubchem Cid", "description": "PubChem Compound ID", "type": "string"}, "pubchem_sid": {"title": "Pubchem Sid", "description": "PubChem Substance ID", "type": "string"}, "pubchem_conformerid": {"title": "Pubchem Conformerid", "description": "PubChem Conformer ID", "type": "string"}}, "additionalProperties": false}, "Provenance": {"title": "Provenance", "description": "Provenance information.\n\n\nParameters\n----------\ncreator : str\n    The name of the program, library, or person who created the object.\nversion : str, Default: \n    The version of the creator, blank otherwise. This should be sortable by the very broad [PEP 440](https://www.python.org/dev/peps/pep-0440/).\nroutine : str, Default: \n    The name of the routine or function within the creator, blank otherwise.", "type": "object", "properties": {"creator": {"title": "Creator", "description": "The name of the program, library, or person who created the object.", "type": "string"}, "version": {"title": "Version", "description": "The version of the creator, blank otherwise. This should be sortable by the very broad [PEP 440](https://www.python.org/dev/peps/pep-0440/).", "default": "", "type": "string"}, "routine": {"title": "Routine", "description": "The name of the routine or function within the creator, blank otherwise.", "default": "", "type": "string"}}, "required": ["creator"], "$schema": "http://json-schema.org/draft-04/schema#"}, "Molecule": {"title": "Molecule", "description": "The physical Cartesian representation of the molecular system.\n\nA QCSchema representation of a Molecule. This model contains\ndata for symbols, geometry, connectivity, charges, fragmentation, etc while also supporting a wide array of I/O and manipulation capabilities.\n\nMolecule objects geometry, masses, and charges are truncated to 8, 6, and 4 decimal places respectively to assist with duplicate detection.", "type": "object", "properties": {"schema_name": {"title": "Schema Name", "description": "The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_molecule.", "default": "qcschema_molecule", "pattern": "^(qcschema_molecule)$", "type": "string"}, "schema_version": {"title": "Schema Version", "description": "The version number of ``schema_name`` to which this model conforms.", "default": 2, "type": "integer"}, "validated": {"title": "Validated", "description": "A boolean indicator (for speed purposes) that the input Molecule data has been previously checked for schema (data layout and type) and physics (e.g., non-overlapping atoms, feasible multiplicity) compliance. This should be False in most cases. A ``True`` setting should only ever be set by the constructor for this class itself or other trusted sources such as a Fractal Server or previously serialized Molecules.", "default": false, "type": "boolean"}, "symbols": {"title": "Symbols", "description": "An ordered (nat,) array-like object of atomic elemental symbols in title case. The index of this attribute sets atomic order for all other per-atom fields like ``real`` and the first dimension of ``geometry``. Ghost/Virtual atoms must have an entry here in ``symbols``; ghostedness is indicated through the ``real`` field.", "shape": ["nat"], "type": "array", "items": {"type": "string"}}, "geometry": {"title": "Geometry", "description": "An ordered (nat,3) array-like for XYZ atomic coordinates [a0]. Atom ordering is fixed; that is, a consumer who shuffles atoms must not reattach the input (pre-shuffling) molecule schema instance to any output (post-shuffling) per-atom results (e.g., gradient). Index of the first dimension matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``.\nSerialized storage is always flat, (3*nat,), but QCSchema implementations will want to reshape it. QCElemental can also accept array-likes which can be mapped to (nat,3) such as a 1-D list of length 3*nat, or the serialized version of the array in (3*nat,) shape; all forms will be reshaped to (nat,3) for this attribute.", "shape": ["nat", 3], "type": "array", "items": {"type": "number"}}, "name": {"title": "Name", "description": "A common or human-readable name to assign to this molecule. Can be arbitrary.", "type": "string"}, "identifiers": {"title": "Identifiers", "description": "An optional dictionary of additional identifiers by which this Molecule can be referenced, such as INCHI, canonical SMILES, etc. See the :class:``Identifiers`` model for more details.", "allOf": [{"$ref": "#/definitions/Identifiers"}]}, "comment": {"title": "Comment", "description": "Additional comments for this Molecule. Intended for pure human/user consumption and clarity.", "type": "string"}, "molecular_charge": {"title": "Molecular Charge", "description": "The net electrostatic charge of the Molecule.", "default": 0.0, "type": "number"}, "molecular_multiplicity": {"title": "Molecular Multiplicity", "description": "The total multiplicity of the Molecule.", "default": 1, "type": "integer"}, "masses": {"title": "Masses", "description": "An ordered 1-D array-like object of atomic masses [u] of shape (nat,). Index order matches the 0-indexed indices of all other per-atom fields like ``symbols`` and ``real``. If this is not provided, the mass of each atom is inferred from their most common isotope. If this is provided, it must be the same length as ``symbols`` but can accept ``None`` entries for standard masses to infer from the same index in the ``symbols`` field.", "shape": ["nat"], "type": "array", "items": {"type": "number"}}, "real": {"title": "Real", "description": "An ordered 1-D array-like object of shape (nat,) indicating if each atom is real (``True``) or ghost/virtual (``False``). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and the first dimension of ``geometry``. If this is not provided, all atoms are assumed to be real (``True``).If this is provided, the reality or ghostedness of every atom must be specified.", "shape": ["nat"], "type": "array", "items": {"type": "boolean"}}, "atom_labels": {"title": "Atom Labels", "description": "Additional per-atom labels as a 1-D array-like of of strings of shape (nat,). Typical use is in model conversions, such as Elemental <-> Molpro and not typically something which should be user assigned. See the ``comments`` field for general human-consumable text to affix to the Molecule.", "shape": ["nat"], "type": "array", "items": {"type": "string"}}, "atomic_numbers": {"title": "Atomic Numbers", "description": "An optional ordered 1-D array-like object of atomic numbers of shape (nat,). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Values are inferred from the ``symbols`` list if not explicitly set. Ghostedness should be indicated through ``real`` field, not zeros here.", "shape": ["nat"], "type": "array", "items": {"type": "number", "multipleOf": 1.0}}, "mass_numbers": {"title": "Mass Numbers", "description": "An optional ordered 1-D array-like object of atomic *mass* numbers of shape (nat). Index matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Values are inferred from the most common isotopes of the ``symbols`` list if not explicitly set. If single isotope not (yet) known for an atom, -1 is placeholder.", "shape": ["nat"], "type": "array", "items": {"type": "number", "multipleOf": 1.0}}, "connectivity": {"title": "Connectivity", "description": "A list of bonds within the molecule. Each entry is a tuple of ``(atom_index_A, atom_index_B, bond_order)`` where the ``atom_index`` matches the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Bonds may be freely reordered and inverted.", "minItems": 1, "type": "array", "items": {"type": "array", "items": [{"type": "integer", "minimum": 0}, {"type": "integer", "minimum": 0}, {"type": "number", "minimum": 0, "maximum": 5}]}}, "fragments": {"title": "Fragments", "description": "List of indices grouping atoms (0-indexed) into molecular fragments within the Molecule. This is a list of shape (nfr) of 1-D array-like objects of arbitrary length. Each entry in the list indicates a new fragment. The index of the list matches the 0-indexed indices of ``fragment_charges`` and ``fragment_multiplicities``. The 1-D array-like objects are sets of atom indices indicating the atoms which compose the fragment. The atom indices match the 0-indexed indices of all other per-atom settings like ``symbols`` and ``real``. Fragment ordering is fixed; that is, a consumer who shuffles fragments must not reattach the input (pre-shuffling) molecule schema instance to any output (post-shuffling) per-fragment results (e.g., n-body energy arrays).", "shape": ["nfr", "<varies>"], "type": "array", "items": {"type": "array", "items": {"type": "number", "multipleOf": 1.0}}}, "fragment_charges": {"title": "Fragment Charges", "description": "The total charge of each fragment in the ``fragments`` list of shape (nfr,). The index of this list matches the 0-index indices of ``fragments`` list. Will be filled in based on a set of rules if not provided (and ``fragments`` are specified).", "shape": ["nfr"], "type": "array", "items": {"type": "number"}}, "fragment_multiplicities": {"title": "Fragment Multiplicities", "description": "The multiplicity of each fragment in the ``fragments`` list of shape (nfr,). The index of this list matches the 0-index indices of ``fragments`` list. Will be filled in based on a set of rules if not provided (and ``fragments`` are specified).", "shape": ["nfr"], "type": "array", "items": {"type": "integer"}}, "fix_com": {"title": "Fix Com", "description": "Whether translation of geometry is allowed (fix F) or disallowed (fix T).When False, QCElemental will pre-process the Molecule object to translate the center of mass to (0,0,0) in Euclidean coordinate space, resulting in a different ``geometry`` than the one provided. guidance: A consumer who translates the geometry must not reattach the input (pre-translation) molecule schema instance to any output (post-translation) origin-sensitive results (e.g., an ordinary energy when EFP present).", "default": false, "type": "boolean"}, "fix_orientation": {"title": "Fix Orientation", "description": "Whether rotation of geometry is allowed (fix F) or disallowed (fix T). When False, QCElemental will pre-process the Molecule object to orient via the intertial tensor, resulting in a different ``geometry`` than the one provided. guidance: A consumer who rotates the geometry must not reattach the input (pre-rotation) molecule schema instance to any output (post-rotation) frame-sensitive results (e.g., molecular vibrations).", "default": false, "type": "boolean"}, "fix_symmetry": {"title": "Fix Symmetry", "description": "Maximal point group symmetry which ``geometry`` should be treated. Lowercase.", "type": "string"}, "provenance": {"title": "Provenance", "description": "The provenance information about how this Molecule (and its attributes) were generated, provided, and manipulated.", "allOf": [{"$ref": "#/definitions/Provenance"}]}, "id": {"title": "Id", "description": "A unique identifier for this Molecule object. This field exists primarily for Databases (e.g. Fractal's Server) to track and lookup this specific object and should virtually never need to be manually set."}, "extras": {"title": "Extras", "description": "Extra information to associate with this Molecule.", "type": "object"}}, "required": ["symbols", "geometry"], "additionalProperties": false, "$schema": "http://json-schema.org/draft-04/schema#"}, "DriverEnum": {"title": "DriverEnum", "description": "Allowed computation driver values.", "enum": ["energy", "gradient", "hessian", "properties"], "type": "string"}, "HarmonicType": {"title": "HarmonicType", "description": "The angular momentum representation of a shell.", "enum": ["spherical", "cartesian"], "type": "string"}, "ElectronShell": {"title": "ElectronShell", "description": "Information for a single electronic shell", "type": "object", "properties": {"angular_momentum": {"title": "Angular Momentum", "description": "Angular momentum for the shell as an array of integers.", "minItems": 1, "type": "array", "items": {"type": "integer", "minimum": 0}, "uniqueItems": true}, "harmonic_type": {"$ref": "#/definitions/HarmonicType"}, "exponents": {"title": "Exponents", "description": "Exponents for the contracted shell.", "minItems": 1, "type": "array", "items": {"anyOf": [{"type": "number"}, {"type": "string"}]}}, "coefficients": {"title": "Coefficients", "description": "General contraction coefficients for the shell, individual list components will be the individual segment contraction coefficients.", "minItems": 1, "type": "array", "items": {"type": "array", "items": {"anyOf": [{"type": "number"}, {"type": "string"}]}, "minItems": 1}}}, "required": ["angular_momentum", "harmonic_type", "exponents", "coefficients"], "additionalProperties": false}, "ECPType": {"title": "ECPType", "description": "The type of the ECP potential.", "enum": ["scalar", "spinorbit"], "type": "string"}, "ECPPotential": {"title": "ECPPotential", "description": "Information for a single ECP potential.", "type": "object", "properties": {"ecp_type": {"$ref": "#/definitions/ECPType"}, "angular_momentum": {"title": "Angular Momentum", "description": "Angular momentum for the potential as an array of integers.", "minItems": 1, "type": "array", "items": {"type": "integer", "minimum": 0}, "uniqueItems": true}, "r_exponents": {"title": "R Exponents", "description": "Exponents of the 'r' term.", "minItems": 1, "type": "array", "items": {"type": "integer"}}, "gaussian_exponents": {"title": "Gaussian Exponents", "description": "Exponents of the 'gaussian' term.", "minItems": 1, "type": "array", "items": {"anyOf": [{"type": "number"}, {"type": "string"}]}}, "coefficients": {"title": "Coefficients", "description": "General contraction coefficients for the potential, individual list components will be the individual segment contraction coefficients.", "minItems": 1, "type": "array", "items": {"type": "array", "items": {"anyOf": [{"type": "number"}, {"type": "string"}]}, "minItems": 1}}}, "required": ["ecp_type", "angular_momentum", "r_exponents", "gaussian_exponents", "coefficients"], "additionalProperties": false}, "BasisCenter": {"title": "BasisCenter", "description": "Data for a single atom/center in a basis set.\n\n\nParameters\n----------\nelectron_shells : :class:`ElectronShell`\n    Electronic shells for this center.\necp_electrons : int, Default: 0\n    Number of electrons replaced by ECP, MCP, or other field potentials.\necp_potentials : :class:`ECPPotential`, Optional\n    ECPs, MCPs, or other field potentials for this center.", "type": "object", "properties": {"electron_shells": {"title": "Electron Shells", "description": "Electronic shells for this center.", "minItems": 1, "type": "array", "items": {"$ref": "#/definitions/ElectronShell"}, "uniqueItems": true}, "ecp_electrons": {"title": "Ecp Electrons", "description": "Number of electrons replaced by ECP, MCP, or other field potentials.", "default": 0, "type": "integer"}, "ecp_potentials": {"title": "Ecp Potentials", "description": "ECPs, MCPs, or other field potentials for this center.", "minItems": 1, "type": "array", "items": {"$ref": "#/definitions/ECPPotential"}, "uniqueItems": true}}, "required": ["electron_shells"], "additionalProperties": false}, "BasisSet": {"title": "BasisSet", "description": "A quantum chemistry basis description.\n\n\nParameters\n----------\nschema_name : ConstrainedStrValue, Default: qcschema_basis\n    The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.\nschema_version : int, Default: 1\n    The version number of ``schema_name`` to which this model conforms.\nname : str\n    A standard basis name if available (e.g., 'cc-pVDZ').\ndescription : str, Optional\n    A brief description of the basis set.\ncenter_data : :class:`BasisCenter`\n    Shared basis data for all atoms/centers in the parent molecule\natom_map : List[str]\n    Mapping of all atoms/centers in the parent molecule to centers in `center_data`.\nnbf : int, Optional\n    The number of basis functions.", "type": "object", "properties": {"schema_name": {"title": "Schema Name", "description": "The QCSchema specification to which this model conforms. Explicitly fixed as qcschema_basis.", "default": "qcschema_basis", "pattern": "^(qcschema_basis)$", "type": "string"}, "schema_version": {"title": "Schema Version", "description": "The version number of ``schema_name`` to which this model conforms.", "default": 1, "type": "integer"}, "name": {"title": "Name", "description": "A standard basis name if available (e.g., 'cc-pVDZ').", "type": "string"}, "description": {"title": "Description", "description": "A brief description of the basis set.", "type": "string"}, "center_data": {"title": "Center Data", "description": "Shared basis data for all atoms/centers in the parent molecule", "type": "object", "additionalProperties": {"$ref": "#/definitions/BasisCenter"}}, "atom_map": {"title": "Atom Map", "description": "Mapping of all atoms/centers in the parent molecule to centers in `center_data`.", "type": "array", "items": {"type": "string"}}, "nbf": {"title": "Nbf", "description": "The number of basis functions.", "type": "integer"}}, "required": ["name", "center_data", "atom_map"], "additionalProperties": false, "$schema": "http://json-schema.org/draft-04/schema#"}, "Model": {"title": "Model", "description": "The computational molecular sciences model to run.\n\n\nParameters\n----------\nmethod : str\n    The quantum chemistry method to evaluate (e.g., B3LYP, PBE, ...). For MM, name of the force field.\nbasis : Union[str, :class:`BasisSet`], Optional\n    The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...). Can be ``None`` for methods without basis sets. For molecular mechanics, name of the atom-typer.", "type": "object", "properties": {"method": {"title": "Method", "description": "The quantum chemistry method to evaluate (e.g., B3LYP, PBE, ...). For MM, name of the force field.", "type": "string"}, "basis": {"title": "Basis", "description": "The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...). Can be ``None`` for methods without basis sets. For molecular mechanics, name of the atom-typer.", "anyOf": [{"type": "string"}, {"$ref": "#/definitions/BasisSet"}]}}, "required": ["method"]}, "WavefunctionProtocolEnum": {"title": "WavefunctionProtocolEnum", "description": "Wavefunction to keep from a Result computation.", "enum": ["all", "orbitals_and_eigenvalues", "return_results", "none"], "type": "string"}, "ErrorCorrectionProtocol": {"title": "ErrorCorrectionProtocol", "description": "Configuration for how QCEngine handles error correction\n\n    WARNING: These protocols are currently experimental and only supported by NWChem tasks\n\n\nParameters\n----------\ndefault_policy : bool, Default: True\n    Whether to allow error corrections to be used if not directly specified in `policies`\npolicies : name='policies' type=Optional[Mapping[str, bool]] required=False default=None, Optional\n    Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used.", "type": "object", "properties": {"default_policy": {"title": "Default Policy", "description": "Whether to allow error corrections to be used if not directly specified in `policies`", "default": true, "type": "boolean"}, "policies": {"title": "Policies", "description": "Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used.", "type": "object", "additionalProperties": {"type": "boolean"}}}, "additionalProperties": false}, "AtomicResultProtocols": {"title": "AtomicResultProtocols", "description": "Protocols regarding the manipulation of a Result output data.\n\n\nParameters\n----------\nwavefunction : {all,orbitals_and_eigenvalues,return_results,none}, Default: none\n\n        Wavefunction to keep from a Result computation.\n    \nstdout : bool, Default: True\n    Primary output file to keep from a Result computation\nerror_correction : :class:`ErrorCorrectionProtocol`, Optional\n    Policies for error correction", "type": "object", "properties": {"wavefunction": {"$ref": "#/definitions/WavefunctionProtocolEnum"}, "stdout": {"title": "Stdout", "description": "Primary output file to keep from a Result computation", "default": true, "type": "boolean"}, "error_correction": {"title": "Error Correction", "description": "Policies for error correction", "allOf": [{"$ref": "#/definitions/ErrorCorrectionProtocol"}]}}, "additionalProperties": false}}}